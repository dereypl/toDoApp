{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","date","_this","handleDate","e","setState","target","value","handleChange","handleClick","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","id","type","placeholder","onChange","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","finishDate","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","activeTasks","map","src_components_Task","key","doneTasks","Fragment","App","deleteTask","Object","toConsumableArray","index","findIndex","splice","changeTaskStatus","Array","from","forEach","getTime","addTask","push","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c237c29.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css'\r\n\r\nclass AddTask extends Component {\r\n\r\n    minDate = new Date().toISOString().slice(0, 10);\r\n    state = {\r\n        text: '',\r\n        date: this.minDate\r\n    }\r\n\r\n    handleDate = e => {\r\n        this.setState({\r\n            date: e.target.value\r\n        })\r\n    }\r\n    handleChange = e => {\r\n        this.setState({\r\n            text: e.target.value,\r\n        })\r\n    }\r\n    handleClick = () => {\r\n        const { text, date } = this.state;\r\n        if (text.length > 2) {\r\n            const add = this.props.add(text, date);\r\n            if (add) {\r\n                this.setState({\r\n                    text: '',\r\n                    date: this.minDate\r\n                })\r\n            }\r\n        } else alert('Zadanie zbyt krotkie')\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n        maxDate = maxDate + \"-12-31\";\r\n\r\n        return (\r\n            <div className=\"form\">\r\n                <input id=\"addTask\" type=\"text\" placeholder=\"Wprowadź zadanie...\" value={this.state.text} onChange={this.handleChange} />\r\n                <label htmlFor=\"date\">Deadline:</label>\r\n                <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n                <button id=\"addTaskButton\" onClick={this.handleClick}>Dodaj</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AddTask;","import React from 'react';\r\nimport './Task.css';\r\n\r\nconst Task = (props) => {\r\n\r\n\r\n    const { text, date, id, active, finishDate } = props.task;\r\n\r\n    if (active) {\r\n        return (\r\n            <div className=\"wrapTask\">\r\n                <div className=\"task\" ><strong>{text}</strong> <span>do: {date}</span></div>\r\n                <button className=\"doneBtn\" onClick={() => props.change(id)}>Zakończ</button>\r\n                <button className=\"deleteBtn\" onClick={() => props.delete(id)}>Usuń</button>\r\n            </div >\r\n        );\r\n    }\r\n    else {\r\n\r\n        const finish = new Date(finishDate).toLocaleString()\r\n        return (\r\n            <div className=\"wrapTaskDone\">\r\n\r\n                <div className=\"taskDone\" ><strong>{text}</strong> - do <span>{date}</span>\r\n                    <br></br>Potwierdzenie wykonania: <span>{finish}</span>\r\n                </div>\r\n                <button className=\"deleteBtn\" onClick={() => props.delete(id)}>Usuń</button>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task'\r\nimport './Tasklist.css'\r\n\r\nconst TaskList = props => {\r\n\r\n\r\n\r\n    const active = props.tasks.filter(task => task.active)\r\n    const done = props.tasks.filter(task => !task.active)\r\n\r\n\r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n    return (\r\n        <>\r\n            <div className=\"active\">\r\n                <p>ZADANIA DO WYKONANIA:</p>\r\n                {activeTasks.length > 0 ? activeTasks : <p>brak zadań do wykonania.</p>}\r\n            </div>\r\n            <div className=\"done\">\r\n                <p>WYKONANE ZADANIA: <em>({done.length})</em></p>\r\n                {doneTasks}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'Poszerzyć wiedzę o React',\n        date: '2019-08-30',\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 1,\n        text: 'Poszerzyć wiedzę o Sass',\n        date: '2019-07-31',\n        active: true,\n        finishDate: null\n      }, {\n        id: 2,\n        text: 'Poszerzyć wiedzę o Css',\n        date: '2019-07-20',\n        active: true,\n        finishDate: null\n      }, {\n        id: 3,\n        text: 'Poszerzyć wiedzę o JavaScript',\n        date: '2019-07-25',\n        active: true,\n        finishDate: null\n      }, {\n        id: 4,\n        text: 'Znaleźć pracę',\n        date: '2019-08-20',\n        active: true,\n        finishDate: null\n      }\n    ]\n  }\n\n  deleteTask = (id) => {\n\n    const tasks = [...this.state.tasks]\n    const index = tasks.findIndex(task => task.id === id)\n    tasks.splice(index, 1)\n\n    this.setState({\n      tasks\n    })\n\n  }\n\n  changeTaskStatus = (id) => {\n\n    const tasks = Array.from(this.state.tasks)\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    })\n\n    this.setState({\n      tasks\n    })\n  }\n\n  addTask = (text, date) => {\n\n    const task = {\n      id: this.state.tasks.length + 1,\n      text,\n      date,\n      active: true,\n      finishDate: null\n    }\n\n    const tasks = [...this.state.tasks]\n    tasks.push(task)\n\n    this.setState({\n      tasks\n    })\n    return true\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"top\"><div id=\"logo\"><strong>TODO APP</strong><br /><span>BY MATEUSZ PASICH</span></div></div>\n        <AddTask add={this.addTask} />\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\n      </div >\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}